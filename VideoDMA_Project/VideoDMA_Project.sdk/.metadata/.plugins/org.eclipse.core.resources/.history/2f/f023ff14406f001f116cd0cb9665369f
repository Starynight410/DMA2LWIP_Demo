
#include "xuartns550.h"
#include "xil_printf.h"
#include "sleep.h"
#include "xgpiops.h"
#include "xuartps.h"
#include "xplatform_info.h"
#include "string.h"
#include "xgpiops.h"
#include "xscugic.h"
#include "netif/xadapter.h"

#include <stdio.h>

#include "xparameters.h"

#include "netif/xadapter.h"

#include "platform.h"
#include "platform_config.h"
#if defined (__arm__) || defined(__aarch64__)
#include "xil_printf.h"
#endif

#include "lwip/tcp.h"
#include "xil_cache.h"

#if LWIP_IPV6==1
#include "lwip/ip.h"
#else
#if LWIP_DHCP==1
#include "lwip/dhcp.h"
#endif
#endif

/************************** Constant Definitions *****************************/

/*
 * The following constants map to the XPAR parameters created in the
 * xparameters.h file. They are defined here such that a user can easily
 * change all the needed parameters in one place.
 */
#define UART_DEVICE_ID		XPAR_UARTNS550_0_DEVICE_ID
#define EMIOLED1    		54
#define EMIOTRIGGER    		55
#define DDR_BASE_ADDR 		0x00000000
#define DATA_SIZE 			1024  // 读取的数据大小

/************************** Function Prototypes ******************************/

int UartNs550MultiFunction(u16 DeviceId);
u8 order_rec();

/************************** Variable Definitions *****************************/

// Uart define
XUartNs550 UartNs550;		/* The instance of the UART Driver */

// EMIO LED and Trigger define
XGpioPs gXGpioLed1;
XGpioPs gXGpioTrigger;

/*****************************************************************************/
/**
* Main function to call the example.
*
*
* @return
*		- XST_FAILURE if the Test Failed.
*		- A non-negative number indicating the number of
*		characters sent.
*
* @note		None.
*
******************************************************************************/

/* defined by each RAW mode application */
void print_app_header();
int start_application();
int transfer_data();
void tcp_fasttmr(void);
void tcp_slowtmr(void);

/* missing declaration in lwIP */
void lwip_init();
int process_TriggerIntr(int* data_bufferPtr, int FileSize);	// TCP Transfer

#if LWIP_IPV6==0
#if LWIP_DHCP==1
extern volatile int dhcp_timoutcntr;
err_t dhcp_start(struct netif *netif);
#endif
#endif

extern volatile int TcpFastTmrFlag;
extern volatile int TcpSlowTmrFlag;
static struct netif server_netif;
struct netif *echo_netif;

#if LWIP_IPV6==1
void print_ip6(char *msg, ip_addr_t *ip)
{
	print(msg);
	xil_printf(" %x:%x:%x:%x:%x:%x:%x:%x\n\r",
			IP6_ADDR_BLOCK1(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK2(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK3(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK4(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK5(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK6(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK7(&ip->u_addr.ip6),
			IP6_ADDR_BLOCK8(&ip->u_addr.ip6));

}
#else
void
print_ip(char *msg, ip_addr_t *ip)
{
	print(msg);
	xil_printf("%d.%d.%d.%d\n\r", ip4_addr1(ip), ip4_addr2(ip),
			ip4_addr3(ip), ip4_addr4(ip));
}

void
print_ip_settings(ip_addr_t *ip, ip_addr_t *mask, ip_addr_t *gw)
{

	print_ip("Board IP: ", ip);
	print_ip("Netmask : ", mask);
	print_ip("Gateway : ", gw);
}
#endif

#if defined (__arm__) && !defined (ARMR5)
#if XPAR_GIGE_PCS_PMA_SGMII_CORE_PRESENT == 1 || XPAR_GIGE_PCS_PMA_1000BASEX_CORE_PRESENT == 1
int ProgramSi5324(void);
int ProgramSfpPhy(void);
#endif
#endif

#ifdef XPS_BOARD_ZCU102
#ifdef XPAR_XIICPS_0_DEVICE_ID
int IicPhyReset(void);
#endif
#endif

int main()
{
#if LWIP_IPV6==0
	ip_addr_t ipaddr, netmask, gw;

#endif
	/* the mac address of the board. this should be unique per board */
	unsigned char mac_ethernet_address[] =
	{ 0x00, 0x0a, 0x35, 0x00, 0x01, 0x02 };

	echo_netif = &server_netif;
#if defined (__arm__) && !defined (ARMR5)
#if XPAR_GIGE_PCS_PMA_SGMII_CORE_PRESENT == 1 || XPAR_GIGE_PCS_PMA_1000BASEX_CORE_PRESENT == 1
	ProgramSi5324();
	ProgramSfpPhy();
#endif
#endif

/* Define this board specific macro in order perform PHY reset on ZCU102 */
#ifdef XPS_BOARD_ZCU102
	if(IicPhyReset()) {
		xil_printf("Error performing PHY reset \n\r");
		return -1;
	}
#endif

	init_platform();

#if LWIP_IPV6==0
#if LWIP_DHCP==1
    ipaddr.addr = 0;
	gw.addr = 0;
	netmask.addr = 0;
#else
	/* initialize IP addresses to be used */
	IP4_ADDR(&ipaddr,  192, 168,   1, 10);
	IP4_ADDR(&netmask, 255, 255, 255,  0);
	IP4_ADDR(&gw,      192, 168,   1,  1);
#endif
#endif
	print_app_header();

	lwip_init();

#if (LWIP_IPV6 == 0)
	/* Add network interface to the netif_list, and set it as default */
	if (!xemac_add(echo_netif, &ipaddr, &netmask,
						&gw, mac_ethernet_address,
						PLATFORM_EMAC_BASEADDR)) {
		xil_printf("Error adding N/W interface\n\r");
		return -1;
	}
#else
	/* Add network interface to the netif_list, and set it as default */
	if (!xemac_add(echo_netif, NULL, NULL, NULL, mac_ethernet_address,
						PLATFORM_EMAC_BASEADDR)) {
		xil_printf("Error adding N/W interface\n\r");
		return -1;
	}
	echo_netif->ip6_autoconfig_enabled = 1;

	netif_create_ip6_linklocal_address(echo_netif, 1);
	netif_ip6_addr_set_state(echo_netif, 0, IP6_ADDR_VALID);

	print_ip6("\n\rBoard IPv6 address ", &echo_netif->ip6_addr[0].u_addr.ip6);

#endif
	netif_set_default(echo_netif);

	/* now enable interrupts */
	platform_enable_interrupts();

	/* specify that the network if is up */
	netif_set_up(echo_netif);

#if (LWIP_IPV6 == 0)
#if (LWIP_DHCP==1)
	/* Create a new DHCP client for this interface.
	 * Note: you must call dhcp_fine_tmr() and dhcp_coarse_tmr() at
	 * the predefined regular intervals after starting the client.
	 */
	dhcp_start(echo_netif);
	dhcp_timoutcntr = 24;

	while(((echo_netif->ip_addr.addr) == 0) && (dhcp_timoutcntr > 0))
		xemacif_input(echo_netif);

	if (dhcp_timoutcntr <= 0) {
		if ((echo_netif->ip_addr.addr) == 0) {
			xil_printf("DHCP Timeout\r\n");
			xil_printf("Configuring default IP of 192.168.1.10\r\n");
			IP4_ADDR(&(echo_netif->ip_addr),  192, 168,   1, 10);
			IP4_ADDR(&(echo_netif->netmask), 255, 255, 255,  0);
			IP4_ADDR(&(echo_netif->gw),      192, 168,   1,  1);
		}
	}

	ipaddr.addr = echo_netif->ip_addr.addr;
	gw.addr = echo_netif->gw.addr;
	netmask.addr = echo_netif->netmask.addr;
#endif

	print_ip_settings(&ipaddr, &netmask, &gw);

#endif
	/* start the application (web server, rxtest, txtest, etc..) */
	start_application();

	/* receive and process packets */
	while (1) {
		if (TcpFastTmrFlag) {
			tcp_fasttmr();
			TcpFastTmrFlag = 0;
		}
		if (TcpSlowTmrFlag) {
			tcp_slowtmr();
			TcpSlowTmrFlag = 0;
		}
//		xemacif_input(echo_netif);
//		transfer_data();

		int Status;

		Status = UartNs550MultiFunction(UART_DEVICE_ID);

		if (Status == XST_FAILURE) {
			xil_printf("Uartns550 MultiFunction Failed\r\n");
			return XST_FAILURE;
		}

		xil_printf("Successfully ran Uartns550 MultiFunction\r\n");

		return Status;
	}

	/* never reached */
	cleanup_platform();

	return 0;
}


/******************************************************************************/
/**
*
* This function sends Hello World with the UART 16450/550 device and driver as
* a design example. The purpose of this function is to illustrate how to use
* the XUartNs550 driver.
*
* This function polls the UART and does not require the use of interrupts.
*
* @param	DeviceId is the XPAR_<UARTNS550_instance>_DEVICE_ID value from
*		xparameters.h
*
* @return
*		- XST_FAILURE if the UART driver could not be initialized
*		successfully.
*		- A non-negative number indicating the number of characters
*		sent.
*
* @note		None.
*
****************************************************************************/
//通信协议：$ w 0 1 a         (18 byte)
//0代表亮灭: 0-off; 1-on
//读数据时，返回格式为$ 2 b
//读写命令空格都要计算在内

u8 HelloWorld[11]="HelloWorld\n";
u8 order_buf[18]={0};		//保存命令
u8 order_cnt=0;				//数组计数器
u8 cfg_buf[4]={0};			//SPI配置参数
u8 cfg_temp[3]={0};			//保存每个参数用于转换十进制

int UartNs550MultiFunction(u16 DeviceId)
{
//	u8  sendbuf[5]={'$',' ',2,' ','b'};
	u8  rec_cnt=0;
	int SentCount = 0;
	int Status;
	XGpioPs_Config *ConfigPtr;

    // LED test
    ConfigPtr = XGpioPs_LookupConfig(XPAR_XGPIOPS_0_DEVICE_ID);

	Status = XGpioPs_CfgInitialize(&gXGpioLed1, ConfigPtr, ConfigPtr->BaseAddr);
	if (Status != XST_SUCCESS)  return XST_FAILURE;
	Status = XGpioPs_CfgInitialize(&gXGpioTrigger, ConfigPtr, ConfigPtr->BaseAddr);
	if (Status != XST_SUCCESS)  return XST_FAILURE;

	XGpioPs_SetDirectionPin(&gXGpioLed1, EMIOLED1, 1);
	XGpioPs_SetOutputEnablePin(&gXGpioLed1, EMIOLED1, 1);

	XGpioPs_SetDirectionPin(&gXGpioTrigger, EMIOTRIGGER, 1);
	XGpioPs_SetOutputEnablePin(&gXGpioTrigger, EMIOTRIGGER, 1);
	XGpioPs_WritePin(&gXGpioTrigger, EMIOTRIGGER, 0);

	// Initialize the UartNs550 device so that it is ready to use
	//波特率19200
	Status = XUartNs550_Initialize(&UartNs550, DeviceId);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	xil_printf("Initiate Uart and LED succeed\r\n");
	XGpioPs_WritePin(&gXGpioLed1, EMIOLED1, 1);		//手动点灯

	// DDR
	u8 buffer[DATA_SIZE];
	u32 ddr_addr = DDR_BASE_ADDR;  // DDR内存的基地址

	while(1)
	{
		rec_cnt = order_rec();

		if(rec_cnt==1)
		{
			rec_cnt = 0;

			if(order_buf[2]=='w')			//操作灯命令
			{
				if(order_buf[4]=='1')
				{
					XGpioPs_WritePin(&gXGpioLed1, EMIOLED1, order_buf[6]);
				}
			}

			else if(order_buf[2]=='t')		//写入测试数据
			{
				XGpioPs_WritePin(&gXGpioTrigger, EMIOTRIGGER, 1);
				sleep(0.01);
				XGpioPs_WritePin(&gXGpioTrigger, EMIOTRIGGER, 0);

//				memset(buffer, 0, sizeof(buffer));
//				ddr_addr = DDR_BASE_ADDR;
			}

			else if(order_buf[2]=='q')		//取ddr数据并通过串口发出
			{
				// 从DDR内存读取数据
				for (int i = 0; i < DATA_SIZE; i++) {
					buffer[i] = *((volatile u8 *)(ddr_addr + i));
				}
//				XUartNs550_Send(&UartNs550, buffer, DATA_SIZE);

				process_TriggerIntr(buffer, DATA_SIZE);

			}

			memset(order_buf, 0, sizeof(order_buf));
		}
	}

	return SentCount;
}


//读取串口接收数据，每一个值都保存到全局数组order_buf中
//接收完一条命令后返回1，其他返回0
u8 order_rec()
{
	u8 rec_buf[1]={0};
	u8 rec_mark=0;
	rec_mark = XUartNs550_Recv(&UartNs550,&rec_buf[0],1);
	if(rec_mark!=0)
	{
		order_buf[order_cnt]=rec_buf[0];
		if(order_cnt==17)	//定长指令
		{
			order_cnt=0;
			return 1;
		}
		else
		{
			order_cnt++;
			return 0;
		}
	}
	return 0;
}

//网口发数
int process_TriggerIntr(u8* data_bufferPtr, int FileSize)
{
	err_t err;
	//send Data to PC through TCP/IP
	for (uint32_t i = 0; i <= (FileSize >> 10); i++)
	{
		if(i == (AdcData_Length >> 10))
		{
//			send_data(data_bufferPtr + i*1024, AdcData_Length - (i*1024));

			err = tcp_write(data_connected_pcb, data_bufferPtr + i*1024, FileSize - (i*1024), 1);
			if (err != ERR_OK)
			{
				xil_printf("TCP client: Error on tcp_write: %d\r\n", err);
				data_connected_pcb = NULL;
			}
			err = tcp_output(data_connected_pcb);
			if (err != ERR_OK)
			{
				xil_printf("TCP client: Error on tcp_output: %d\r\n", err);
				data_connected_pcb = NULL;
			}
		}

		else
		{
//			send_data(data_bufferPtr + i*1024, 1024);

			err = tcp_write(data_connected_pcb, data_bufferPtr + i*1024, 1024, 1);
			if (err != ERR_OK)
			{
				xil_printf("TCP client: Error on tcp_write: %d\r\n", err);
				data_connected_pcb = NULL;
			}
			err = tcp_output(data_connected_pcb);
			if (err != ERR_OK)
			{
				xil_printf("TCP client: Error on tcp_output: %d\r\n", err);
				data_connected_pcb = NULL;
			}
		}

		send_cnt = send_cnt + 1;
		if(send_cnt == 1)
		{
			xemacif_input(netif);
			send_cnt = 0;
		}
	}

	return XST_SUCCESS;
}
